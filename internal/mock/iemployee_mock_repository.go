// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/andys920605/hr-system/internal/south/port/repository (interfaces: EmployeeRepository)
//
// Generated by this command:
//
//	mockgen -destination=../../../mock/iemployee_mock_repository.go -package=mock github.com/andys920605/hr-system/internal/south/port/repository EmployeeRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	employee "github.com/andys920605/hr-system/internal/domain/model/employee"
	gomock "go.uber.org/mock/gomock"
)

// MockEmployeeRepository is a mock of EmployeeRepository interface.
type MockEmployeeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeRepositoryMockRecorder
	isgomock struct{}
}

// MockEmployeeRepositoryMockRecorder is the mock recorder for MockEmployeeRepository.
type MockEmployeeRepositoryMockRecorder struct {
	mock *MockEmployeeRepository
}

// NewMockEmployeeRepository creates a new mock instance.
func NewMockEmployeeRepository(ctrl *gomock.Controller) *MockEmployeeRepository {
	mock := &MockEmployeeRepository{ctrl: ctrl}
	mock.recorder = &MockEmployeeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeRepository) EXPECT() *MockEmployeeRepositoryMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockEmployeeRepository) GetByID(ctx context.Context, id int64) (*employee.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*employee.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockEmployeeRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockEmployeeRepository)(nil).GetByID), ctx, id)
}

// Save mocks base method.
func (m *MockEmployeeRepository) Save(ctx context.Context, employee *employee.Employee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, employee)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockEmployeeRepositoryMockRecorder) Save(ctx, employee any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockEmployeeRepository)(nil).Save), ctx, employee)
}
